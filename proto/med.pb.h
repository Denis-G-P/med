// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: med.proto

#ifndef PROTOBUF_med_2eproto__INCLUDED
#define PROTOBUF_med_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_med_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsplainImpl();
void InitDefaultsplain();
inline void InitDefaults() {
  InitDefaultsplain();
}
}  // namespace protobuf_med_2eproto
class plain;
class plainDefaultTypeInternal;
extern plainDefaultTypeInternal _plain_default_instance_;

enum plain_Enum {
  plain_Enum_ZERO = 0,
  plain_Enum_ONE = 1,
  plain_Enum_TWO = 2,
  plain_Enum_plain_Enum_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  plain_Enum_plain_Enum_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool plain_Enum_IsValid(int value);
const plain_Enum plain_Enum_Enum_MIN = plain_Enum_ZERO;
const plain_Enum plain_Enum_Enum_MAX = plain_Enum_TWO;
const int plain_Enum_Enum_ARRAYSIZE = plain_Enum_Enum_MAX + 1;

const ::google::protobuf::EnumDescriptor* plain_Enum_descriptor();
inline const ::std::string& plain_Enum_Name(plain_Enum value) {
  return ::google::protobuf::internal::NameOfEnum(
    plain_Enum_descriptor(), value);
}
inline bool plain_Enum_Parse(
    const ::std::string& name, plain_Enum* value) {
  return ::google::protobuf::internal::ParseNamedEnum<plain_Enum>(
    plain_Enum_descriptor(), name, value);
}
// ===================================================================

class plain : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:plain) */ {
 public:
  plain();
  virtual ~plain();

  plain(const plain& from);

  inline plain& operator=(const plain& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  plain(plain&& from) noexcept
    : plain() {
    *this = ::std::move(from);
  }

  inline plain& operator=(plain&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const plain& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const plain* internal_default_instance() {
    return reinterpret_cast<const plain*>(
               &_plain_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(plain* other);
  friend void swap(plain& a, plain& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline plain* New() const PROTOBUF_FINAL { return New(NULL); }

  plain* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const plain& from);
  void MergeFrom(const plain& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(plain* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef plain_Enum Enum;
  static const Enum ZERO =
    plain_Enum_ZERO;
  static const Enum ONE =
    plain_Enum_ONE;
  static const Enum TWO =
    plain_Enum_TWO;
  static inline bool Enum_IsValid(int value) {
    return plain_Enum_IsValid(value);
  }
  static const Enum Enum_MIN =
    plain_Enum_Enum_MIN;
  static const Enum Enum_MAX =
    plain_Enum_Enum_MAX;
  static const int Enum_ARRAYSIZE =
    plain_Enum_Enum_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Enum_descriptor() {
    return plain_Enum_descriptor();
  }
  static inline const ::std::string& Enum_Name(Enum value) {
    return plain_Enum_Name(value);
  }
  static inline bool Enum_Parse(const ::std::string& name,
      Enum* value) {
    return plain_Enum_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // int64 int_64 = 2;
  void clear_int_64();
  static const int kInt64FieldNumber = 2;
  ::google::protobuf::int64 int_64() const;
  void set_int_64(::google::protobuf::int64 value);

  // int32 int_32 = 1;
  void clear_int_32();
  static const int kInt32FieldNumber = 1;
  ::google::protobuf::int32 int_32() const;
  void set_int_32(::google::protobuf::int32 value);

  // uint32 uint_32 = 3;
  void clear_uint_32();
  static const int kUint32FieldNumber = 3;
  ::google::protobuf::uint32 uint_32() const;
  void set_uint_32(::google::protobuf::uint32 value);

  // uint64 uint_64 = 4;
  void clear_uint_64();
  static const int kUint64FieldNumber = 4;
  ::google::protobuf::uint64 uint_64() const;
  void set_uint_64(::google::protobuf::uint64 value);

  // sint64 sint_64 = 6;
  void clear_sint_64();
  static const int kSint64FieldNumber = 6;
  ::google::protobuf::int64 sint_64() const;
  void set_sint_64(::google::protobuf::int64 value);

  // sint32 sint_32 = 5;
  void clear_sint_32();
  static const int kSint32FieldNumber = 5;
  ::google::protobuf::int32 sint_32() const;
  void set_sint_32(::google::protobuf::int32 value);

  // bool bool_1 = 7;
  void clear_bool_1();
  static const int kBool1FieldNumber = 7;
  bool bool_1() const;
  void set_bool_1(bool value);

  // fixed64 fix_64 = 10;
  void clear_fix_64();
  static const int kFix64FieldNumber = 10;
  ::google::protobuf::uint64 fix_64() const;
  void set_fix_64(::google::protobuf::uint64 value);

  // sfixed64 sfix_64 = 11;
  void clear_sfix_64();
  static const int kSfix64FieldNumber = 11;
  ::google::protobuf::int64 sfix_64() const;
  void set_sfix_64(::google::protobuf::int64 value);

  // double dreal = 12;
  void clear_dreal();
  static const int kDrealFieldNumber = 12;
  double dreal() const;
  void set_dreal(double value);

  // .plain.Enum enum_1 = 8;
  void clear_enum_1();
  static const int kEnum1FieldNumber = 8;
  ::plain_Enum enum_1() const;
  void set_enum_1(::plain_Enum value);

  // fixed32 fix_32 = 50;
  void clear_fix_32();
  static const int kFix32FieldNumber = 50;
  ::google::protobuf::uint32 fix_32() const;
  void set_fix_32(::google::protobuf::uint32 value);

  // sfixed32 sfix_32 = 51;
  void clear_sfix_32();
  static const int kSfix32FieldNumber = 51;
  ::google::protobuf::int32 sfix_32() const;
  void set_sfix_32(::google::protobuf::int32 value);

  // float real = 52;
  void clear_real();
  static const int kRealFieldNumber = 52;
  float real() const;
  void set_real(float value);

  // @@protoc_insertion_point(class_scope:plain)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int64 int_64_;
  ::google::protobuf::int32 int_32_;
  ::google::protobuf::uint32 uint_32_;
  ::google::protobuf::uint64 uint_64_;
  ::google::protobuf::int64 sint_64_;
  ::google::protobuf::int32 sint_32_;
  bool bool_1_;
  ::google::protobuf::uint64 fix_64_;
  ::google::protobuf::int64 sfix_64_;
  double dreal_;
  int enum_1_;
  ::google::protobuf::uint32 fix_32_;
  ::google::protobuf::int32 sfix_32_;
  float real_;
  mutable int _cached_size_;
  friend struct ::protobuf_med_2eproto::TableStruct;
  friend void ::protobuf_med_2eproto::InitDefaultsplainImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// plain

// int32 int_32 = 1;
inline void plain::clear_int_32() {
  int_32_ = 0;
}
inline ::google::protobuf::int32 plain::int_32() const {
  // @@protoc_insertion_point(field_get:plain.int_32)
  return int_32_;
}
inline void plain::set_int_32(::google::protobuf::int32 value) {
  
  int_32_ = value;
  // @@protoc_insertion_point(field_set:plain.int_32)
}

// int64 int_64 = 2;
inline void plain::clear_int_64() {
  int_64_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 plain::int_64() const {
  // @@protoc_insertion_point(field_get:plain.int_64)
  return int_64_;
}
inline void plain::set_int_64(::google::protobuf::int64 value) {
  
  int_64_ = value;
  // @@protoc_insertion_point(field_set:plain.int_64)
}

// uint32 uint_32 = 3;
inline void plain::clear_uint_32() {
  uint_32_ = 0u;
}
inline ::google::protobuf::uint32 plain::uint_32() const {
  // @@protoc_insertion_point(field_get:plain.uint_32)
  return uint_32_;
}
inline void plain::set_uint_32(::google::protobuf::uint32 value) {
  
  uint_32_ = value;
  // @@protoc_insertion_point(field_set:plain.uint_32)
}

// uint64 uint_64 = 4;
inline void plain::clear_uint_64() {
  uint_64_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 plain::uint_64() const {
  // @@protoc_insertion_point(field_get:plain.uint_64)
  return uint_64_;
}
inline void plain::set_uint_64(::google::protobuf::uint64 value) {
  
  uint_64_ = value;
  // @@protoc_insertion_point(field_set:plain.uint_64)
}

// sint32 sint_32 = 5;
inline void plain::clear_sint_32() {
  sint_32_ = 0;
}
inline ::google::protobuf::int32 plain::sint_32() const {
  // @@protoc_insertion_point(field_get:plain.sint_32)
  return sint_32_;
}
inline void plain::set_sint_32(::google::protobuf::int32 value) {
  
  sint_32_ = value;
  // @@protoc_insertion_point(field_set:plain.sint_32)
}

// sint64 sint_64 = 6;
inline void plain::clear_sint_64() {
  sint_64_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 plain::sint_64() const {
  // @@protoc_insertion_point(field_get:plain.sint_64)
  return sint_64_;
}
inline void plain::set_sint_64(::google::protobuf::int64 value) {
  
  sint_64_ = value;
  // @@protoc_insertion_point(field_set:plain.sint_64)
}

// bool bool_1 = 7;
inline void plain::clear_bool_1() {
  bool_1_ = false;
}
inline bool plain::bool_1() const {
  // @@protoc_insertion_point(field_get:plain.bool_1)
  return bool_1_;
}
inline void plain::set_bool_1(bool value) {
  
  bool_1_ = value;
  // @@protoc_insertion_point(field_set:plain.bool_1)
}

// .plain.Enum enum_1 = 8;
inline void plain::clear_enum_1() {
  enum_1_ = 0;
}
inline ::plain_Enum plain::enum_1() const {
  // @@protoc_insertion_point(field_get:plain.enum_1)
  return static_cast< ::plain_Enum >(enum_1_);
}
inline void plain::set_enum_1(::plain_Enum value) {
  
  enum_1_ = value;
  // @@protoc_insertion_point(field_set:plain.enum_1)
}

// fixed64 fix_64 = 10;
inline void plain::clear_fix_64() {
  fix_64_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 plain::fix_64() const {
  // @@protoc_insertion_point(field_get:plain.fix_64)
  return fix_64_;
}
inline void plain::set_fix_64(::google::protobuf::uint64 value) {
  
  fix_64_ = value;
  // @@protoc_insertion_point(field_set:plain.fix_64)
}

// sfixed64 sfix_64 = 11;
inline void plain::clear_sfix_64() {
  sfix_64_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 plain::sfix_64() const {
  // @@protoc_insertion_point(field_get:plain.sfix_64)
  return sfix_64_;
}
inline void plain::set_sfix_64(::google::protobuf::int64 value) {
  
  sfix_64_ = value;
  // @@protoc_insertion_point(field_set:plain.sfix_64)
}

// double dreal = 12;
inline void plain::clear_dreal() {
  dreal_ = 0;
}
inline double plain::dreal() const {
  // @@protoc_insertion_point(field_get:plain.dreal)
  return dreal_;
}
inline void plain::set_dreal(double value) {
  
  dreal_ = value;
  // @@protoc_insertion_point(field_set:plain.dreal)
}

// fixed32 fix_32 = 50;
inline void plain::clear_fix_32() {
  fix_32_ = 0u;
}
inline ::google::protobuf::uint32 plain::fix_32() const {
  // @@protoc_insertion_point(field_get:plain.fix_32)
  return fix_32_;
}
inline void plain::set_fix_32(::google::protobuf::uint32 value) {
  
  fix_32_ = value;
  // @@protoc_insertion_point(field_set:plain.fix_32)
}

// sfixed32 sfix_32 = 51;
inline void plain::clear_sfix_32() {
  sfix_32_ = 0;
}
inline ::google::protobuf::int32 plain::sfix_32() const {
  // @@protoc_insertion_point(field_get:plain.sfix_32)
  return sfix_32_;
}
inline void plain::set_sfix_32(::google::protobuf::int32 value) {
  
  sfix_32_ = value;
  // @@protoc_insertion_point(field_set:plain.sfix_32)
}

// float real = 52;
inline void plain::clear_real() {
  real_ = 0;
}
inline float plain::real() const {
  // @@protoc_insertion_point(field_get:plain.real)
  return real_;
}
inline void plain::set_real(float value) {
  
  real_ = value;
  // @@protoc_insertion_point(field_set:plain.real)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::plain_Enum> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::plain_Enum>() {
  return ::plain_Enum_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_med_2eproto__INCLUDED
